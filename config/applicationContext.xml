<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- -->
	<context:component-scan
		base-package="com.yech.yechblog.dao.impl,com.yech.yechblog.service.impl,com.yech.yechblog.action,com.yech.yechblog.listener"></context:component-scan>
	<!-- 配置 c3p0 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>

		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>

	<!-- 配置 SessionFactory Spring 整合 hibernate 的核心入口 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/yech/yechblog/entity</value>
			</list>
		</property>
	</bean>

	<!-- 配置 Spring 的声明式事务 -->
	<!-- 1.配置 hibernate 的事务管理器 ,在 service 层面实现事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 2.配置事务属性 (事务通知) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 写操作 -->
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="delete*" />
			<tx:method name="batch*" />

			<!-- 读操作 -->
			<tx:method name="load*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />

			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 日志记录仪 -->
	<bean id="logger" class="com.yech.yechblog.advice.Logger"></bean>

	<!-- 3.配置事务切入点，再把事务属性和事务切入点关联起来 -->
	<aop:config>
		<!-- (* *..*Service.*(..)): (*(任何返回值) *(任何包).(子包).(包和类的分隔)*Service(以Service结尾的类或接口).*(任何方法)(..)(任意参数)) -->
		<!-- 事务切入点通知 -->
		<aop:pointcut expression="execution(* *..*Service.*(..))"
			id="txPointcut" />
		<!-- Logger 切面 -->
		<aop:aspect id="loggerAspect" ref="logger">
			<aop:around method="record"
				pointcut="execution(* *..*Service.save*(..)) 
												or execution(* *..*Service.update*(..))
												or execution(* *..*Service.delete*(..))
												or execution(* *..*Service.batch*(..))
												or execution(* *..*Service.new*(..))
												or execution(* *..*Service.move*(..))
												or execution(* *..*Service.clear*(..))
												or execution(* *..*Service.toggle*(..))
												and !bean(logService)
												" />
		</aop:aspect>
	</aop:config>
</beans>
